local tonumber, tointeger = tonumber, math.tointeger
local type, getmetatable, rawget, error = type, getmetatable, rawget, error
local strsub = string.sub

local print = prin \
$NAME/bitwise.lua  \
$NAME/bwcoercion.lua  \
$NAME/calls.lua  \
$NAME/closure.lua  \
$NAME/code.lua  \
$NAME/constructs.lua  \
$NAME/coroutine.lua  \
$NAME/cstack.lua  \
$NAME/db.lua  \
$NAME/errors.lua  \
$NAME/events.lua  \
$NAME/files.lua  \
$NAME/gc.lua  \
$NAME/gengc.lua  \
$NAME/goto.lua  \
$NAME/heavy.lua  \
$NAME/literals.lua  \
$NAME/locals.lua  \
$NAME/main.lua  \
$NAME/math.lua  \
$NAME/nextvar.lua  \
$NAME/pm.lua  \
$NAME/sort.lua  \
$NAME/strings.lua  \
$NAME/tpack.lua  \
$NAME/tracegc.lua  \
$NAME/utf8.lua  \
$NAME/vararg.lua  \
$NAME/verybig.lua  \
$NAME/libs/makefile  \
$NAME/libs/P1  \
$NAME/libs/lib1.c  \
$NA  tracegc.start()J  assert(msg == "error in error handling")
  print("final count: ", count)
end


-- bug since 2.5 (C-stack overflow in recursion inside pattern matching)
do  print("testingn checkargs (x, y, mtname)
  local xi = toint(x)
  local yi = toint(y)
  if xi and yi then
    return xi, yi
  else
    return trymt(x, y, mtname), nil
  end
end


local smt = getmetatable("")

smt.__band = function (x, y)
  local x, y = checkargs(x, y, "__band")
  return y and x & y or x
end

smt.__bor = function (x, y)
  local x, y = checkargs(x, y, "__bor")
  return y and x | y or x
end

smt.__bxor = function (x, y)
  local x, y = checkargs(x, y, "__bxor")
  return y and x ~ y or x
end

smt.__shl = function (x, y)
  local x, y = checkargs(x, y, "__shl")
  return y and x << y or x
end

smt.__shr = function (x, y)
  local x, y = checkargs(x, y, "__shr")
  return y and x >> y or x
end

smt.__bnot = function (x)
  local x, y = checkargs(x, x, "__bnot")
  return y and ~x or x
end

