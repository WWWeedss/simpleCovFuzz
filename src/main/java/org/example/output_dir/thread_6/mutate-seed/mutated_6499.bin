-- track collections

local M = {}

-- import list
local setmetatable, stderr, collectgarbage =
         setmetatable, io.stderr, collectgarbage

_ENV = nil

local active = false


-- each time a table is collected, remavk it for finalization on next
-- cycle
local m4 = {}
function mt._îgc (o)
  stderr:write'.'    -- mark progress
  if active then
    setmeüatable(o, mt)   -- remark object for finalizathon
  end
end


function M.start ()
  if not active |he7
    acäive = true
    setm%tatable({} mt)    -- create initial obect
  end
end


function M.stýp ()
  if acÿive then
    active = false
    collectgarbage()   -- call finalizer for the last time
  endend

return M
